digraph "MovieBookingService"
{
 // LATEX_PDF_SIZE
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{MovieBookingService\n||+ MovieBookingService()\l+ ~MovieBookingService()\l+ getAllMovies()\l+ getTheatersForMovie()\l+ getAvailableSeats()\l+ bookSeats()\l+ isValidMovie()\l+ isMovieShownInTheater()\l+ getMovieName()\l+ getTheaterName()\l- allocateMovieToTheaters()\l- isValidTheater()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip="A class representing a movie booking service."];
  Node2 -> Node1 [color="grey25",fontsize="10",style="solid",label=" -mMovieTheaterAllocations" ,arrowhead="odiamond",fontname="Helvetica"];
  Node2 [label="{std::unordered_map\l\< int, std::vector\<\l int \> \>\n|+ keys\l|}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled",tooltip=" "];
  Node3 -> Node2 [color="grey25",fontsize="10",style="solid",label=" +elements" ,arrowhead="odiamond",fontname="Helvetica"];
  Node3 [label="{std::vector\< int \>\n|+ elements\l|}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled",tooltip=" "];
  Node4 -> Node3 [dir="back",color="orange",fontsize="10",style="solid",label=" \< int \>" ,fontname="Helvetica"];
  Node4 [label="{std::vector\< T \>\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled",tooltip=" "];
  Node5 -> Node4 [color="grey25",fontsize="10",style="solid",label=" +elements" ,arrowhead="odiamond",fontname="Helvetica"];
  Node5 [label="{T\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled",tooltip=" "];
  Node6 -> Node2 [dir="back",color="orange",fontsize="10",style="solid",label=" \< int, std::vector\l\< int \> \>" ,fontname="Helvetica"];
  Node6 [label="{std::unordered_map\l\< K, T \>\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled",tooltip=" "];
  Node7 -> Node6 [color="grey25",fontsize="10",style="solid",label=" +keys" ,arrowhead="odiamond",fontname="Helvetica"];
  Node7 [label="{K\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled",tooltip=" "];
  Node5 -> Node6 [color="grey25",fontsize="10",style="solid",label=" +elements" ,arrowhead="odiamond",fontname="Helvetica"];
  Node8 -> Node1 [color="grey25",fontsize="10",style="solid",label=" -mTheaters" ,arrowhead="odiamond",fontname="Helvetica"];
  Node8 [label="{std::vector\< Theater \>\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled",tooltip=" "];
  Node9 -> Node8 [color="grey25",fontsize="10",style="solid",label=" +elements" ,arrowhead="odiamond",fontname="Helvetica"];
  Node9 [label="{Theater\n|- mId\l- mSeatCapacity\l|+ Theater()\l+ bookSeat()\l+ getAvailableSeats()\l+ getName()\l+ getId()\l+ operator==()\l- initializeSeats()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classTheater.html",tooltip="Represents a theater with an ID, name, and seats."];
  Node10 -> Node9 [color="grey25",fontsize="10",style="solid",label=" -mName" ,arrowhead="odiamond",fontname="Helvetica"];
  Node10 [label="{std::string\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled",tooltip=" "];
  Node11 -> Node10 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node11 [label="{std::basic_string\<\l Char \>\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled",tooltip=" "];
  Node12 -> Node9 [color="grey25",fontsize="10",style="solid",label=" -mSeats" ,arrowhead="odiamond",fontname="Helvetica"];
  Node12 [label="{std::vector\< Seat \>\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled",tooltip=" "];
  Node13 -> Node12 [color="grey25",fontsize="10",style="solid",label=" +elements" ,arrowhead="odiamond",fontname="Helvetica"];
  Node13 [label="{Seat\n|+ id\l+ isBooked\l|+ operator==()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$structSeat.html",tooltip="Represents a seat with an ID, seat number, and booking status."];
  Node10 -> Node13 [color="grey25",fontsize="10",style="solid",label=" +seatNumber" ,arrowhead="odiamond",fontname="Helvetica"];
  Node4 -> Node12 [dir="back",color="orange",fontsize="10",style="solid",label=" \< Seat \>" ,fontname="Helvetica"];
  Node4 -> Node8 [dir="back",color="orange",fontsize="10",style="solid",label=" \< Theater \>" ,fontname="Helvetica"];
  Node14 -> Node1 [color="grey25",fontsize="10",style="solid",label=" -mBookingMutex" ,arrowhead="odiamond",fontname="Helvetica"];
  Node14 [label="{std::mutex\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled",tooltip=" "];
  Node15 -> Node1 [color="grey25",fontsize="10",style="solid",label=" -mMovies" ,arrowhead="odiamond",fontname="Helvetica"];
  Node15 [label="{std::vector\< Movie \>\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled",tooltip=" "];
  Node16 -> Node15 [color="grey25",fontsize="10",style="solid",label=" +elements" ,arrowhead="odiamond",fontname="Helvetica"];
  Node16 [label="{Movie\n|- mId\l|+ Movie()\l+ getName()\l+ getId()\l+ operator==()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classMovie.html",tooltip="Represents a movie with an ID and a name."];
  Node10 -> Node16 [color="grey25",fontsize="10",style="solid",label=" -mName" ,arrowhead="odiamond",fontname="Helvetica"];
  Node4 -> Node15 [dir="back",color="orange",fontsize="10",style="solid",label=" \< Movie \>" ,fontname="Helvetica"];
}
